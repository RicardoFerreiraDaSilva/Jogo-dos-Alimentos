document.addEventListener('DOMContentLoaded', () => {

    // --- SEÇÃO 1: ESTADO GLOBAL E REFERÊNCIAS ---
    let gameState = 'MAIN_MENU';
    let currentRoom = 1;
    let lastTime = 0;
    let roomClearTimer = 0;
    const refs = { mainContainer: document.getElementById('main-container'), gameArea: document.getElementById('game-area'), player: document.getElementById('player'), roomMessage: document.getElementById('room-message'), shop: { overlay: document.getElementById('shop-overlay'), itemsContainer: document.getElementById('shop-items'), description: document.getElementById('item-description'), proceedButton: document.getElementById('proceed-button'), rerollButton: document.getElementById('reroll-button') }, ui: { room: document.getElementById('current-room'), health: document.getElementById('player-health'), shield: document.getElementById('player-shield'), attack: document.getElementById('player-attack'), coins: document.getElementById('player-coins'), inventory: document.getElementById('inventory-list') }, menu: { main: document.getElementById('main-menu'), playBtn: document.getElementById('play-button'), encyclopediaBtn: document.getElementById('encyclopedia-button') }, encyclopedia: { screen: document.getElementById('encyclopedia-screen'), container: document.getElementById('encyclopedia-items'), backBtn: document.getElementById('back-to-menu-button') } };
    const keys = { ArrowUp: false, ArrowDown: false, ArrowLeft: false, ArrowRight: false };

    // --- SEÇÃO 2: ESTADO DO JOGADOR E DADOS DO JOGO ---
    let playerState; 
    let activeCompanions = [], activeFood = [], activeProjectiles = [], activeEnemies = [], activeCoins = [], activePastaProjectiles = [], activeOrangeProjectiles = [], activeFriendProjectiles = [];
    const initialPlayerState = {x:385,y:285,speed:250,baseHealth:100,bonusHealth:0,get health(){return this.baseHealth+this.bonusHealth},set health(v){this.baseHealth=v-this.bonusHealth},baseAttack:10,bonusAttack:0,get attack(){return this.baseAttack+this.bonusAttack},set attack(v){this.baseAttack=v-this.bonusAttack},shield:0,coins:30,isInvincible:false,invincibilityTimer:0,lastMoveDirection:{x:0,y:-1},inventory:new Map(),shopRerolls:1,lastFireTime:0,fireCooldown:0.3,milkUpgrade:false,bananaUpgrade:false,hasPoisonUpgrade:false,poisonDPS:1,hasGrapesUpgrade:false,canSpawnEggs:false,aimInMoveDirection:false,hasDoubleShot:false,hasPastaShot:false,pastaFireRate:1,pastaFireTimer:1,pastaSlowFactor:0,watermelonOrb:{damage:0,angle:0,radius:60},extraShopSlots:0,orangeUpgrade:0,orangeFireTimer:5,orangeJuiceUpgrade:false,hasHomingShots:false,companionBuffs:{bonusDamage:0,bonusHealth:0},butterStacks:0,hasGrapeJuice:false,greenGrapesStacks:0,hasGrapePie:false,hasGrapeCuca:false,hasWhiteGrape:false};
    const foodTypes=[{name:'banana',effect:()=>{playerState.health+=playerState.bananaUpgrade?3:1}},{name:'leite',effect:()=>{playerState.health+=playerState.milkUpgrade?2:1}},{name:'cenoura',effect:()=>{playerState.baseAttack+=1}},{name:'couve',effect:()=>{playerState.shield+=5}}];
    const specialFood=[{name:'ovo',effect:()=>{playerState.health+=1;playerState.baseAttack+=1}}];
    
    // CORREÇÃO: Sua lista de itens completa foi restaurada.
    let masterShopList=[{id:'tomate',name:'Tomate',symbol:'🍅',desc:'Dobra seu ataque base permanentemente.',cost:30,onPurchase:()=>{playerState.baseAttack*=2},stackable:false},{id:'alface',name:'Alface',symbol:'🥬',desc:'Concede 30 de escudo.',cost:30,onPurchase:()=>{playerState.shield+=30},stackable:true},{id:'caixaDeLeite',name:'Caixa de Leite',symbol:'L🥛',desc:'Leite agora cura o dobro (passivo).',cost:30,onPurchase:()=>{playerState.milkUpgrade=true},stackable:false},{id:'laranja',name:'Laranja',symbol:'🍊',desc:'Dispara 5 projéteis a cada 5s (+2 de dano por compra).',cost:35,onPurchase:()=>{playerState.orangeUpgrade+=1},stackable:true},{id:'sucoDeLaranja',name:'Suco de Laranja',symbol:'🧃🍊',desc:'(RARO) Dobra o dano dos projéteis do item Laranja.',cost:50,onPurchase:()=>{playerState.orangeJuiceUpgrade=true},stackable:false,rarity:'rare'},{id:'maca',name:'Maçã',symbol:'🍎',desc:'Tiros têm 50% de chance de aplicar veneno.',cost:30,onPurchase:()=>{playerState.hasPoisonUpgrade=true},stackable:false},{id:'sucoDeMaca',name:'Suco de Maçã',symbol:'🥤🍎',desc:'(RARO) Veneno da Maçã causa +30 de dano por segundo.',cost:50,onPurchase:()=>{playerState.poisonDPS+=30},stackable:false,rarity:'rare'},{id:'uvas',name:'Uvas',symbol:'🍇',desc:'Moedas coletadas valem o dobro.',cost:30,onPurchase:()=>{playerState.hasGrapesUpgrade=true},stackable:false},{id:'melancia',name:'Melancia',symbol:'🍉',desc:'Cria uma orbe de dano ao seu redor (+10 de dano por compra).',cost:40,onPurchase:()=>{playerState.watermelonOrb.damage+=10;if(!document.getElementById('watermelon-orb'))createEntity('watermelon-orb','watermelon-orb')},stackable:true},{id:'frango',name:'Frango',symbol:'🍗',desc:'Permite que Ovos apareçam nas fases (+1 Vida, +1 Dano).',cost:30,onPurchase:()=>{playerState.canSpawnEggs=true},stackable:false},{id:'bife',name:'Bife',symbol:'🥩',desc:'Seus tiros agora vão na direção em que você se move.',cost:30,onPurchase:()=>{playerState.aimInMoveDirection=true},stackable:false},{id:'coelho',name:'Coelho',symbol:'🐇',desc:'Atira um projétil adicional (tiro duplo).',cost:40,onPurchase:()=>{playerState.hasDoubleShot=true},stackable:false},{id:'ovelha',name:'Ovelha',symbol:'🐑',desc:'Dobra o valor do seu escudo atual.',cost:25,onPurchase:()=>{if(playerState.shield>0)playerState.shield*=2},stackable:true},{id:'macarrao',name:'Macarrão',symbol:'🍝',desc:'Ganha um tiro automático que causa lentidão (+10% por compra).',cost:35,onPurchase:()=>{playerState.hasPastaShot=true;playerState.pastaSlowFactor+=0.1},stackable:true},{id:'pepino',name:'Pepino',symbol:'🥒',desc:'Adiciona +1 opção de item no próximo mercado (máx. 9).',cost:20,onPurchase:()=>{if(playerState.extraShopSlots<6)playerState.extraShopSlots++},stackable:true},{id:'batidaDeBanana',name:'Batida de Banana',symbol:'🍌',desc:'Bananas agora curam 3 de vida.',cost:25,onPurchase:()=>{playerState.bananaUpgrade=true},stackable:false},{id:'bolo',name:'Bolo',symbol:'🎂',desc:'(RARO) Seu tiro principal se torna teleguiado.',cost:60,onPurchase:()=>{playerState.hasHomingShots=true},stackable:false,rarity:'rare'},{id:'chocolate',name:'Chocolate',symbol:'🍫',desc:'(RARO) Conjura um amigo chocolate que luta ao seu lado.',cost:70,onPurchase:()=>{createCompanion('chocolate')},stackable:false,rarity:'rare'},{id:'pytaya',name:'Pytaya',symbol:'🐉',desc:'(RARO) Conjura um amigo dragão que dispara bolas de fogo.',cost:80,onPurchase:()=>{createCompanion('dragon')},stackable:false,rarity:'rare'},{id:'sorvete',name:'Sorvete',symbol:'🍦',desc:'Conjura um amigo sorvete que dispara lasers.',cost:45,onPurchase:()=>{createCompanion('ice_cream')},stackable:false},{id:'iogurte',name:'Iogurte',symbol:'🍶',desc:'Conjura um amigo iogurte que te cura por segundo.',cost:50,onPurchase:()=>{createCompanion('yogurt')},stackable:false},{id:'queijo',name:'Queijo',symbol:'🧀',desc:'Conjura um amigo queijo que coleta itens para você.',cost:40,onPurchase:()=>{createCompanion('cheese')},stackable:false},{id:'doceDeLeite',name:'Doce de Leite',symbol:'🍮',desc:'Seus companheiros ganham +20 Vida e +10 Dano.',cost:30,onPurchase:()=>{playerState.companionBuffs.bonusHealth+=20;playerState.companionBuffs.bonusDamage+=10;activeCompanions.forEach(c=>{c.health+=20;c.damage+=10;});},stackable:true},{id:'cremeDeLeite',name:'Creme de Leite',symbol:'🥛',desc:'+4 de cura por segundo para o Amigo Iogurte.',cost:25,onPurchase:()=>{const y=activeCompanions.find(c=>c.type==='yogurt');if(y)y.healRate+=4;},stackable:true},{id:'brocolis',name:'Brócolis',symbol:'🥦',desc:'Ganha +1 chance de rerolar os itens da loja.',cost:15,onPurchase:()=>{playerState.shopRerolls++;},stackable:true},{id:'manteiga',name:'Manteiga',symbol:'🧈',desc:'Cria uma aura que empurra inimigos próximos (+alcance por compra).',cost:20,onPurchase:()=>{playerState.butterStacks=(playerState.butterStacks||0)+1;},stackable:true,maxStacks:10},{id:'sucoDeUva',name:'Suco de Uva',symbol:'🧃🍇',desc:'(RARO) Ganha +10 Vida e +10 Ataque para cada 50 moedas.',cost:60,onPurchase:()=>{playerState.hasGrapeJuice=true;},stackable:false,rarity:'rare'},{id:'uvasVerdes',name:'Uvas Verdes',symbol:'🟢',desc:'Coleta 10% das moedas não pegas no fim da sala (acumulável).',cost:20,onPurchase:()=>{if(playerState.greenGrapesStacks<20)playerState.greenGrapesStacks++},stackable:true},{id:'tortaDeUva',name:'Torta de Uva',symbol:'🥧',desc:'Seu escudo se torna igual à sua quantidade de moedas.',cost:40,onPurchase:()=>{playerState.hasGrapePie=true},stackable:false},{id:'cucaDeUva',name:'Cuca de Uva',symbol:'🍰',desc:'(RARO) Ao tomar dano, perde moedas em vez de vida/escudo.',cost:50,onPurchase:()=>{playerState.hasGrapeCuca=true},stackable:false,rarity:'rare'},{id:'uvaBranca',name:'Uva Branca',symbol:'⚪',desc:'(LENDÁRIO) Suas unidades conjuradas ganham 200% de velocidade de ataque.',cost:100,onPurchase:()=>{playerState.hasWhiteGrape=true;activeCompanions.forEach(c=>c.attackSpeedFactor=3);},stackable:false,rarity:'legendary'}];

    // --- SEÇÃO 3: FUNÇÕES DE LÓGICA DO JOGO ---
    function initializeGame(){playerState=JSON.parse(JSON.stringify(initialPlayerState));playerState.inventory=new Map();Object.defineProperty(playerState,'health',{get:function(){return this.baseHealth+this.bonusHealth},set:function(v){this.baseHealth=v-this.bonusHealth},configurable:true});Object.defineProperty(playerState,'attack',{get:function(){return this.baseAttack+this.bonusAttack},set:function(v){this.baseAttack=v-this.bonusAttack},configurable:true});refs.menu.main.classList.add('hidden');refs.mainContainer.classList.remove('hidden');gameState='SHOP'}
    function populateEncyclopedia(){const c=refs.encyclopedia.container;c.innerHTML='';masterShopList.sort((a,b)=>a.name.localeCompare(b.name)).forEach(i=>{const d=document.createElement('div');d.className=`encyclopedia-card ${i.rarity||''}`;d.innerHTML=`<div class="encyclopedia-card-header"><div class="encyclopedia-card-title"><span class="encyclopedia-card-symbol">${i.symbol}</span><span>${i.name}</span></div><span class="encyclopedia-card-cost">${i.cost} M</span></div><p class="encyclopedia-card-desc">${i.desc}</p>`;c.appendChild(d)})}
    function updateStatusBoard(){if(!playerState)return;updateDynamicStats();refs.ui.room.textContent=currentRoom;refs.ui.health.textContent=playerState.health.toFixed(0);refs.ui.shield.textContent=playerState.shield.toFixed(0);refs.ui.attack.textContent=playerState.attack.toFixed(0);refs.ui.coins.textContent=playerState.coins}
    function updateDynamicStats(){if(!playerState)return;playerState.bonusHealth=0;playerState.bonusAttack=0;if(playerState.hasGrapeJuice){const bonus=Math.floor(playerState.coins/50);playerState.bonusHealth=bonus*10;playerState.bonusAttack=bonus*10}if(playerState.hasGrapePie)playerState.shield=playerState.coins}
    function checkCollision(d1,d2){if(!d1||!d2)return false;const r1=d1.getBoundingClientRect(),r2=d2.getBoundingClientRect();return!(r1.right<r2.left||r1.left>r2.right||r1.bottom<r2.top||r1.top>r2.bottom)}
    function createEntity(className,id=null){const div=document.createElement('div');div.className=`entity ${className}`;if(id)div.id=id;refs.gameArea.appendChild(div);return div}
    function createEnemy(health){const e={div:createEntity('enemy'),x:Math.random()*765,y:Math.random()*565,speed:50+(currentRoom*5),health:health,maxHealth:health,dx:(Math.random()-.5)*2,dy:(Math.random()-.5)*2,slowFactor:1,isPoisoned:false,poisonTimer:0};activeEnemies.push(e)}
    function createProjectile(dir,offsetY=0){const offsetX=dir.y*offsetY;const p={div:createEntity('projectile'),x:playerState.x+7.5+offsetX,y:playerState.y+7.5-offsetX,speed:400,dx:dir.x,dy:dir.y};activeProjectiles.push(p)}
    function createCoin(x,y){const c={div:createEntity('coin')};c.div.style.left=x+'px';c.div.style.top=y+'px';activeCoins.push(c)}
    function createFood(){let f=[...foodTypes];if(playerState.canSpawnEggs)f.push(...specialFood);const type=f[Math.floor(Math.random()*f.length)];const food={div:createEntity(`item ${type.name}`),effect:type.effect,name:type.name};food.div.style.left=Math.random()*775+'px';food.div.style.top=Math.random()*575+'px';activeFood.push(food)}
    function openShop(){gameState='PAUSED';updateStatusBoard();refs.shop.overlay.classList.remove('hidden');refs.shop.itemsContainer.innerHTML='';const pool=masterShopList.filter(i=>!playerState.inventory.has(i.name)||i.stackable);const common=pool.filter(i=>!i.rarity);const rare=pool.filter(i=>i.rarity==='rare');const legendary=pool.filter(i=>i.rarity==='legendary');let itemsToShow=common.sort(()=>.5-Math.random()).slice(0,3+playerState.extraShopSlots);if(rare.length>0&&Math.random()<.4)itemsToShow.push(rare.sort(()=>.5-Math.random())[0]);if(legendary.length>0&&Math.random()<.15)itemsToShow.push(legendary.sort(()=>.5-Math.random())[0]);itemsToShow=itemsToShow.slice(0,9);itemsToShow.forEach(itemData=>{const itemDiv=document.createElement('div');itemDiv.className=`shop-item ${itemData.rarity||''}`;itemDiv.innerHTML=`<div class="shop-item-symbol">${itemData.symbol}</div><div class="shop-item-name">${itemData.name}</div>`;if(playerState.coins<itemData.cost)itemDiv.classList.add('disabled');itemDiv.addEventListener('mouseover',()=>{refs.shop.description.textContent=`${itemData.desc} (Custo: ${itemData.cost} moedas)`});itemDiv.addEventListener('click',()=>{if(playerState.coins>=itemData.cost&&(!playerState.inventory.has(itemData.name)||itemData.stackable)){playerState.coins-=itemData.cost;const item=masterShopList.find(i=>i.id===itemData.id);if(item)item.onPurchase();const c=playerState.inventory.get(itemData.name)||0;playerState.inventory.set(itemData.name,c+1);updateStatusBoard();openShop()}});refs.shop.itemsContainer.appendChild(itemDiv)});refs.shop.description.textContent='Passe o mouse sobre um item para ver a descrição.';refs.shop.rerollButton.textContent=`Rerolar (${playerState.shopRerolls})`;refs.shop.rerollButton.disabled=playerState.shopRerolls<=0}
    function handlePlayerDamage(amount){if(playerState.isInvincible)return;if(playerState.hasGrapeCuca&&playerState.coins>0){const d=Math.min(playerState.coins,amount);playerState.coins-=d;amount-=d;updateStatusBoard()}if(amount<=0)return;let s=Math.min(playerState.shield,amount);playerState.shield-=s;amount-=s;if(amount>0)playerState.baseHealth-=amount;playerState.isInvincible=true;playerState.invincibilityTimer=1.5;updateStatusBoard()}
    function startNewRoom(){const allEntities=refs.gameArea.querySelectorAll('.entity:not(#player)');allEntities.forEach(e=>e.remove());activeFood=[];activeCoins=[];activeEnemies=[];activeProjectiles=[];const numEnemies=2+currentRoom;const enemyHealth=10+(currentRoom*5);for(let i=0;i<numEnemies;i++){createEnemy(enemyHealth)}const numFood=1+Math.floor(Math.random()*2);for(let i=0;i<numFood;i++){createFood()}gameState='PLAYING'}
    function updateAndCheckProjectiles(deltaTime){for(let i=activeProjectiles.length-1;i>=0;i--){let p=activeProjectiles[i];p.x+=p.dx*p.speed*deltaTime;p.y+=p.dy*p.speed*deltaTime;p.div.style.left=p.x+'px';p.div.style.top=p.y+'px';if(p.x>800||p.x<0||p.y>600||p.y<0){p.div.remove();activeProjectiles.splice(i,1);continue}for(let j=activeEnemies.length-1;j>=0;j--){const e=activeEnemies[j];if(checkCollision(p.div,e.div)){p.div.remove();activeProjectiles.splice(i,1);e.health-=playerState.attack;break}}}}

    // --- SEÇÃO 4: EVENT LISTENERS ---
    window.addEventListener('keydown',(e)=>{if(keys.hasOwnProperty(e.key)){keys[e.key]=true}if(e.code==='Space'&&gameState==='PLAYING'){e.preventDefault();const now=performance.now();if(now-playerState.lastFireTime>playerState.fireCooldown*1000){playerState.lastFireTime=now;let dir=playerState.aimInMoveDirection?playerState.lastMoveDirection:{x:0,y:-1};createProjectile(dir);if(playerState.hasDoubleShot){createProjectile(dir,15)}}}});
    window.addEventListener('keyup',(e)=>{if(keys.hasOwnProperty(e.key)){keys[e.key]=false}});
    refs.menu.playBtn.addEventListener('click',initializeGame);
    refs.menu.encyclopediaBtn.addEventListener('click',()=>{populateEncyclopedia();refs.menu.main.classList.add('hidden');refs.encyclopedia.screen.classList.remove('hidden')});
    refs.encyclopedia.backBtn.addEventListener('click',()=>{refs.encyclopedia.screen.classList.add('hidden');refs.menu.main.classList.remove('hidden')});
    refs.shop.proceedButton.addEventListener('click',()=>{refs.shop.overlay.classList.add('hidden');gameState='STARTING_ROOM'});

    // --- SEÇÃO 5: O GAME LOOP PRINCIPAL ---
    function gameLoop(timestamp){const deltaTime=(timestamp-lastTime)/1000||0;lastTime=timestamp;switch(gameState){case'MAIN_MENU':case'PAUSED':break;case'SHOP':openShop();break;case'STARTING_ROOM':startNewRoom();break;case'PLAYING':let moveDirection={x:0,y:0};if(keys.ArrowUp)moveDirection.y-=1;if(keys.ArrowDown)moveDirection.y+=1;if(keys.ArrowLeft)moveDirection.x-=1;if(keys.ArrowRight)moveDirection.x+=1;if(moveDirection.x!==0||moveDirection.y!==0){const mag=Math.sqrt(moveDirection.x**2+moveDirection.y**2);const normalizedDir={x:moveDirection.x/mag,y:moveDirection.y/mag};playerState.x+=normalizedDir.x*playerState.speed*deltaTime;playerState.y+=normalizedDir.y*playerState.speed*deltaTime;playerState.lastMoveDirection=normalizedDir}playerState.x=Math.max(0,Math.min(playerState.x,770));playerState.y=Math.max(0,Math.min(playerState.y,570));refs.player.style.left=playerState.x+'px';refs.player.style.top=playerState.y+'px';for(let i=activeEnemies.length-1;i>=0;i--){const e=activeEnemies[i];e.x+=e.dx*e.speed*deltaTime;e.y+=e.dy*e.speed*deltaTime;if(e.x<=0||e.x>=765)e.dx*=-1;if(e.y<=0||e.y>=565)e.dy*=-1;e.div.style.left=e.x+'px';e.div.style.top=e.y+'px';if(checkCollision(refs.player,e.div)){handlePlayerDamage(10)}if(e.health<=0){createCoin(e.x,e.y);e.div.remove();activeEnemies.splice(i,1)}}updateAndCheckProjectiles(deltaTime);for(let i=activeCoins.length-1;i>=0;i--){const coin=activeCoins[i];if(checkCollision(refs.player,coin.div)){playerState.coins+=playerState.hasGrapesUpgrade?2:1;coin.div.remove();activeCoins.splice(i,1);updateStatusBoard()}}for(let i=activeFood.length-1;i>=0;i--){const food=activeFood[i];if(checkCollision(refs.player,food.div)){food.effect();food.div.remove();activeFood.splice(i,1);updateStatusBoard()}}if(activeEnemies.length===0&&gameState==='PLAYING'){gameState='CLEARING_ROOM';roomClearTimer=2.0}break;case'CLEARING_ROOM':roomClearTimer-=deltaTime;if(roomClearTimer<=0){currentRoom++;if(currentRoom%5===0){gameState='SHOP'}else{gameState='STARTING_ROOM'}}break}requestAnimationFrame(gameLoop)}

    // --- INICIA O JOGO ---
    initializeGame();
    gameState='MAIN_MENU';
    refs.mainContainer.classList.add('hidden');
    refs.menu.main.classList.remove('hidden');
    requestAnimationFrame(gameLoop);
});